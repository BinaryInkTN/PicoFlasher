import argparse
import sys
from pathlib import Path
from typing import List, Optional

from .core import ISOFlasher
from .exceptions import FlashError, ValidationError
from .utils import get_disk_info, format_drive
from .validators import validate_iso, validate_usb_device


def main():
    parser = argparse.ArgumentParser(
        description="ISO Flasher - Flash Linux/Windows ISOs to USB drives",
        epilog="Example: iso-flasher flash -i ubuntu.iso -d /dev/sdb"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Command to execute')
    
    # Flash command
    flash_parser = subparsers.add_parser('flash', help='Flash ISO to USB')
    flash_parser.add_argument('-i', '--iso', required=True, help='Path to ISO file')
    flash_parser.add_argument('-d', '--device', required=True, help='USB device path')
    flash_parser.add_argument('-b', '--block-size', type=int, default=4096, 
                             help='Block size for writing (default: 4096)')
    flash_parser.add_argument('--no-verify', action='store_true', 
                             help='Skip verification after flashing')
    flash_parser.add_argument('--no-format', action='store_true',
                             help='Skip formatting before flashing')
    flash_parser.add_argument('-v', '--verbose', action='store_true',
                             help='Verbose output')
    
    # List command
    list_parser = subparsers.add_parser('list', help='List USB devices')
    list_parser.add_argument('-v', '--verbose', action='store_true',
                            help='Detailed output')
    
    # Download command
    download_parser = subparsers.add_parser('download', help='Download ISO')
    download_parser.add_argument('-u', '--url', required=True, help='ISO download URL')
    download_parser.add_argument('-o', '--output', required=True, help='Output file path')
    download_parser.add_argument('-v', '--verbose', action='store_true',
                                help='Verbose output')
    
    # Verify command
    verify_parser = subparsers.add_parser('verify', help='Verify ISO checksum')
    verify_parser.add_argument('-i', '--iso', required=True, help='Path to ISO file')
    verify_parser.add_argument('-c', '--checksum', help='Expected checksum')
    verify_parser.add_argument('-a', '--algorithm', default='sha256',
                              choices=['md5', 'sha1', 'sha256', 'sha512'],
                              help='Hash algorithm')
    
    args = parser.parse_args()
    
    flasher = ISOFlasher(verbose=args.verbose)
    
    try:
        if args.command == 'flash':
            handle_flash(flasher, args)
        elif args.command == 'list':
            handle_list(flasher, args)
        elif args.command == 'download':
            handle_download(flasher, args)
        elif args.command == 'verify':
            handle_verify(flasher, args)
        else:
            parser.print_help()
            
    except (FlashError, ValidationError) as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}", file=sys.stderr)
        sys.exit(1)


def handle_flash(flasher: ISOFlasher, args):
    """Handle flash command"""
    print(f"Flashing {args.iso} to {args.device}")
    
    flasher.flash_iso(
        iso_path=args.iso,
        usb_device=args.device,
        block_size=args.block_size,
        verify=not args.no_verify,
        format_first=not args.no_format
    )
    
    print("Flash completed successfully!")


def handle_list(flasher: ISOFlasher, args):
    """Handle list command"""
    devices = flasher.list_usb_devices()
    
    if not devices:
        print("No USB devices found")
        return
    
    print("Available USB devices:")
    print("-" * 80)
    for i, device in enumerate(devices, 1):
        print(f"{i}. {device['device']}")
        if args.verbose:
            print(f"   Mountpoint: {device['mountpoint']}")
            print(f"   Size: {device['total_size'] / (1024**3):.1f} GB")
            print(f"   Free: {device['free'] / (1024**3):.1f} GB")
            print(f"   Filesystem: {device['filesystem']}")
            print()


def handle_download(flasher: ISOFlasher, args):
    """Handle download command"""
    print(f"Downloading from {args.url} to {args.output}")
    flasher.download_iso(args.url, args.output)
    print("Download completed successfully!")


def handle_verify(flasher: ISOFlasher, args):
    """Handle verify command"""
    # Implementation for checksum verification
    pass


if __name__ == '__main__':
    main()